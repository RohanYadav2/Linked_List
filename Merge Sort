#include <stdio.h>
#include <stdlib.h>
struct node

{
int data;
struct node* next;
}*head=NULL;
void insert_nodes();
void display();

struct node* SortedMerge(struct node* a, struct node* b)
{

if (a == NULL)
return b;

else if (b == NULL)
return a;

struct node* result = NULL;

if (a->data <= b->data)
{
result = a;
result->next = SortedMerge(a->next, b);
}
else
{

result = b;
result->next = SortedMerge(a, b->next);
}

return result;
}

void FBSplit(struct node* temp, struct node** f,

struct node** b)

{

if (temp == NULL || temp->next == NULL)
{
*f = temp;
*b = NULL;
return;
}

struct node* slow = temp;
struct node* fast = temp->next;

while (fast != NULL)
{
fast = fast->next;
if (fast != NULL)
{

slow = slow->next;
fast = fast->next;
}
}

*f = temp;
*b = slow->next;
slow->next = NULL;
}

void MergeSort(struct node** head)
{
if (*head == NULL || (*head)->next == NULL)
return;

struct node* a;
struct node* b;

FBSplit(*head, &a, &b);

MergeSort(&a);
MergeSort(&b);

*head = SortedMerge(a, b);
}

int main()
{
int choice;
while(1)
{
printf("enter choice :");
scanf("%d",&choice);

switch(choice)
{
case 1:insert_nodes();
break;
case 2: display();
break;
case 3: MergeSort(&head);
break;
case 4: exit(0);
break;
default:printf("wrong input");
break;
}
}
return 0;
}
void insert_nodes()
{

struct node *newnode,*temp;
newnode = (struct node*)malloc(sizeof(struct node));
printf("enter data: ");
scanf("%d",&newnode->data);
newnode->next=NULL;
if(head==NULL)
{
head=newnode;
}
else
{
temp=head;
while(temp->next!=NULL)
{
temp=temp->next;
}
temp->next=newnode;
}
}
void display()
{
struct node *temp;
if(head==NULL)
{
printf("\nList is empty:\n");
return;

}
else
{
temp=head;
printf("\nThe List elements are:\n");
while(temp!=NULL)
{
printf("%d\t",temp->data );
temp=temp->next ;
}
}
printf("\n");
}
